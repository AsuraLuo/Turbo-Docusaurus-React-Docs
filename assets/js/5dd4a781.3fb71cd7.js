"use strict";(self.webpackChunkolight_turbo_docusaurus_docs=self.webpackChunkolight_turbo_docusaurus_docs||[]).push([[6604],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},i="TypeScript \u7f16\u7801\u89c4\u7ea6",p={unversionedId:"tutorial-typescript/intro",id:"tutorial-typescript/intro",title:"TypeScript \u7f16\u7801\u89c4\u7ea6",description:"\u524d\u8a00",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/tutorial-typescript/intro.md",sourceDirName:"tutorial-typescript",slug:"/tutorial-typescript/intro",permalink:"/Olight-Turbo-Docusaurus-Frontend-Docs/docs/tutorial-typescript/intro",draft:!1,editUrl:"https://github.com/Olight-Headless/Olight-Turbo-Docusaurus-Frontend-Docs/docs/tutorial-typescript/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tutorial Typescript",permalink:"/Olight-Turbo-Docusaurus-Frontend-Docs/docs/category/tutorial-typescript"},next:{title:"Tutorial React",permalink:"/Olight-Turbo-Docusaurus-Frontend-Docs/docs/category/tutorial-react"}},s={},l=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u7f16\u7801\u98ce\u683c",id:"\u7f16\u7801\u98ce\u683c",level:2},{value:"\u914d\u5957\u5de5\u5177",id:"\u914d\u5957\u5de5\u5177",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typescript-\u7f16\u7801\u89c4\u7ea6"},"TypeScript \u7f16\u7801\u89c4\u7ea6"),(0,r.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,r.kt)("p",null,"TypeScript \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u5f00\u6e90\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u662f JavaScript \u7684\u8d85\u96c6\uff0c\u56e0\u6b64\u5176\u7f16\u7801\u89c4\u7ea6\u548c\u914d\u5957 Lint \u5de5\u5177\u4e5f\u4e0e\u300aJavaScript \u7f16\u7801\u89c4\u7ea6\u300b\u4e00\u8109\u76f8\u627f\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u672c\u6587\u672a\u5305\u542b\u7684\u7f16\u7801\u98ce\u683c\u8bf4\u660e\u5747\u9ed8\u8ba4\u9075\u5faa\u300aJavaScript \u7f16\u7801\u89c4\u7ea6\u300b\u3002")),(0,r.kt)("h2",{id:"\u7f16\u7801\u98ce\u683c"},"\u7f16\u7801\u98ce\u683c"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.alicdn.com/imgextra/i3/O1CN01xiw6bP1oMEFb7VtuO_!!6000000005210-55-tps-663-378.svg",alt:"\u793a\u4f8b\u4ee3\u7801\u6807\u6ce8\u56fe"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u91cd\u8f7d\u7684\u51fd\u6570\u5fc5\u987b\u5199\u5728\u4e00\u8d77 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.md"},"@typescript-eslint/adjacent-overload-signatures")),(0,r.kt)("p",{parentName:"li"},"\u81ea\u7136\u76f8\u5173\u7684\u9879\u7ec4\u5408\u5728\u4e00\u8d77\u5c06\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\u548c\u7ec4\u7ec7\u6027\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function bar(): void;\n  export function foo(sn: string | number): void;\n}\n\n// good\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function foo(sn: string | number): void;\n  export function bar(): void;\n}\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void {}\n  foo(sn: string | number): void {}\n}\n\n// good\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void;\n  bar(): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void;\n  bar(): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void {}\n  bar(): void {}\n}\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function bar(): void;\nexport function foo(sn: string | number): void;\n\n// good\nexport function bar(): void;\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function foo(sn: string | number): void;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u7b80\u5355\u6570\u7ec4\u7c7b\u578b\u7684\u5b9a\u4e49\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"T[]"),"\uff0c\u590d\u6742\u7c7b\u578b\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Array<T>")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/array-type.md"},"@typescript-eslint/array-type")),(0,r.kt)("p",{parentName:"li"},"\u5bf9\u6570\u7ec4\u7c7b\u578b\u7684\u5b9a\u4e49\u4f7f\u7528\u76f8\u540c\u7684\u89c4\u8303\u5c06\u5e2e\u52a9\u5f00\u53d1\u8005\u66f4\u5feb\u5730\u7406\u89e3\u548c\u9605\u8bfb\u7c7b\u578b\u3002"),(0,r.kt)("p",{parentName:"li"},"\u7b80\u5355\u7c7b\u578b\uff08\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u7b49\uff09\u8bf7\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"T[]")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"readonly T[]")," \uff0c\u5176\u4ed6\u590d\u6742\u7c7b\u578b\uff08\u8054\u5408\u3001\u4ea4\u53c9\u3001\u5bf9\u8c61\u3001\u51fd\u6570\u7b49\uff09\u8bf7\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Array<T>")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadonlyArray<T>")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst a: (string | number)[] = ['a', 1];\nconst b: { prop: string }[] = [{ prop: 'a' }];\nconst c: (() => void)[] = [() => {}];\nconst d: Array<MyType> = ['a', 'b'];\nconst e: Array<string> = ['a', 'b'];\nconst f: ReadonlyArray<string> = ['a', 'b'];\n\n// good\nconst a: Array<string | number> = ['a', 1];\nconst b: Array<{ prop: string }> = [{ prop: 'a' }];\nconst c: Array<() => void> = [() => {}];\nconst d: MyType[] = ['a', 'b'];\nconst e: string[] = ['a', 'b'];\nconst f: readonly string[] = ['a', 'b'];\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u4f7f\u7528 TypeScript \u6ce8\u91ca\u6307\u4ee4\u65f6\u9700\u8ddf\u968f\u63cf\u8ff0\u8bf4\u660e ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-ts-comment.md"},"@typescript-eslint/ban-ts-comment")),(0,r.kt)("p",{parentName:"li"},"TS \u63d0\u4f9b\u4e86\u4e00\u4e9b\u6307\u4ee4\u6ce8\u91ca\uff0c\u53ef\u7528\u4e8e\u5ffd\u7565 TypeScript \u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u9636\u6bb5\u7684\u9519\u8bef\uff0c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @ts-expect-error\n// @ts-ignore\n// @ts-nocheck\n// @ts-check\n")),(0,r.kt)("p",{parentName:"li"},"\u6211\u4eec\u5141\u8bb8\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u6307\u4ee4\u6ce8\u91ca\uff0c\u4f46\u9700\u8981\u8ddf\u968f\u4e00\u5b9a\u957f\u5ea6\u7684\u63cf\u8ff0\u8bf4\u660e\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\n// @ts-expect-error\nconsole.log('my code');\n\n// @ts-ignore\nconsole.log('my code');\n\n// good\n// @ts-expect-error: Unreachable code here\nconsole.log('my code');\n\n// @ts-ignore: It's ok to ignore this compile error\nconsole.log('my code');\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"// tslint:<rule-flag>")," \u7b49 tslint \u6ce8\u91ca ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-tslint-comment.md"},"@typescript-eslint/ban-tslint-comment")),(0,r.kt)("p",{parentName:"li"},"tslint \u5df2\u7ecf\u88ab\u5e9f\u5f03\uff0c\u5bf9\u5e94\u7684\u6307\u4ee4\u6ce8\u91ca\u4e5f\u4e0d\u5e94\u518d\u51fa\u73b0\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\n/* tslint:disable */\n/* tslint:enable */\n/* tslint:disable:rule1 rule2 rule3... */\n/* tslint:enable:rule1 rule2 rule3... */\n// tslint:disable-next-line\nsomeCode(); // tslint:disable-line\n// tslint:disable-next-line:rule1 rule2 rule3...\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u5982\u679c\u7c7b\u7684\u5c5e\u6027\u662f\u4e00\u4e2a\u5b57\u9762\u91cf\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u53ea\u8bfb\u5c5e\u6027 ",(0,r.kt)("inlineCode",{parentName:"p"},"readonly")," \u800c\u4e0d\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"getter")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/class-literal-property-style.md"},"@typescript-eslint/class-literal-property-style")),(0,r.kt)("p",{parentName:"li"},"\u7c7b\u4e0a\u6240\u6709\u8fd4\u56de\u300c\u5b57\u9762\u91cf\u300d\u7684 getter \u65b9\u6cd5\uff0c\u90fd\u63a8\u8350\u4f7f\u7528 readonly \u4fee\u9970\u7b26\u6765\u4ee3\u66ff\uff0c\u5b57\u9762\u91cf\u5305\u542b\u5b57\u7b26\u4e32\u3001\u6a21\u677f\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001bigint\u3001\u6b63\u5219\u548c null\u3002"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u8bf4\u660e\uff1a\u5728\u4e00\u4e9b\u7279\u6b8a\u573a\u666f\uff0c\u7f16\u5199\u4ee3\u7801\u7684\u6700\u7ec8\u7528\u6237\u662f JavaScript \u5f00\u53d1\u8005\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 getter \u6765\u4fdd\u8bc1\u5b57\u6bb5\u65e0\u6cd5\u88ab\u91cd\u65b0\u5b9a\u4e49\u548c\u8986\u76d6\uff0c\u56e0\u4e3a readonly \u4fee\u9970\u7b26\u53ea\u4f5c\u7528\u4e8e TypeScript \u7f16\u8bd1\u9636\u6bb5\u3002")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nclass Mx {\n  public static get myField1() {\n    return 1;\n  }\n  private get ['myField2']() {\n    return 'hello world';\n  }\n}\n\n// good\nclass Mx {\n  public readonly myField1 = 1;\n  public readonly myField2 = [1, 2, 3]; // \u975e\u5b57\u9762\u91cf\n  private readonly ['myField3'] = 'hello world';\n  public get myField4() {\n    return `hello from ${window.location.href}`;\n  }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7c7b\u578b\u65ad\u8a00\u5fc5\u987b\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"as Type")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-assertions.md"},"@typescript-eslint/consistent-type-assertions")),(0,r.kt)("p",{parentName:"li"},"\u7c7b\u578b\u65ad\u8a00\uff08type assertiions\uff09\u4e5f\u53ef\u79f0\u4f5c\u7c7b\u578b\u8f6c\u6362\uff08type casting\uff09\uff0c\u672c\u8d28\u4e0a\u662f\u5bf9 TypeScript \u7c7b\u578b\u7cfb\u7edf\u7684\u4eba\u4e3a\u5e72\u9884\uff1a"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"\u5f3a\u5236\u5bf9\u7c7b\u578b\u7684\u65ad\u8a00\u7edf\u4e00\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"as Type")," \u98ce\u683c\u800c\u975e ",(0,r.kt)("inlineCode",{parentName:"li"},"<Type>")," \uff0c\u540e\u8005\u5bb9\u6613\u4e0e ",(0,r.kt)("inlineCode",{parentName:"li"},"JSX")," \u4ea7\u751f\u6df7\u6dc6\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u5bf9\u8c61\u5b57\u9762\u91cf\u7981\u6b62\u7c7b\u578b\u65ad\u8a00\uff0c\u65ad\u8a00\u6210 any \u9664\u5916\uff0c\u5bf9\u8c61\u5b57\u9762\u91cf\u5e94\u8be5\u76f4\u63a5\u58f0\u660e\u3002")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"TypeScript 3.4 \u4e2d\u5f15\u5165\u7684 const \u65ad\u8a00\u5728\u672c\u89c4\u5219\u4e2d\u4e0d\u53d7\u7ea6\u675f\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"let x = 'hello' as const;")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"let x = <const>'hello';")," \u90fd\u662f\u5141\u8bb8\u7684\u3002")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst foo = <string>'bar';\n\n// good\nconst foo = 'bar' as string;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst x = { ... } as T;\nconst y = { ... } as object;\n\n// good\nconst x: T = { ... };\nconst y = { ... } as any;\nconst z = { ... } as unknown;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u4f18\u5148\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"interface")," \u5b9a\u4e49\u7c7b\u578b ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-definitions.md"},"@typescript-eslint/consistent-type-definitions")),(0,r.kt)("p",{parentName:"li"},"interface \u652f\u6301 extend/implement/union \u7b49\u7b49\u7c7b\u578b\u80fd\u529b\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u7528\u4e8e\u63cf\u8ff0\u666e\u901a\u5bf9\u8c61\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ntype T = { x: number };\n\n// good\ntype T = string;\ntype Foo = string | {};\ninterface T {\n  x: number;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u8bbe\u7f6e\u7c7b\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u6027 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-member-accessibility.md"},"@typescript-eslint/explicit-member-accessibility")),(0,r.kt)("p",{parentName:"li"},"\u5c06\u975e\u516c\u5f00\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u6027\u8bbe\u7f6e\u4e3a\u300c\u79c1\u6709\u300d\uff0c\u53ef\u4ee5\u589e\u5f3a\u4ee3\u7801\u53ef\u7406\u89e3\u6027\uff0c\u540c\u65f6\u4e5f\u80fd\u907f\u514d\u4e00\u4e9b\u975e\u6cd5\u8c03\u7528\uff0c\u516c\u5f00\u7684\u6210\u5458\u53ef\u7701\u7565 ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," \u4fee\u9970\u7b26\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nclass Foo {\n  static foo = 'foo';\n  static getFoo() {\n    return Foo.foo;\n  }\n  constructor() {}\n  bar = 'bar';\n  getBar() {}\n  get baz() {\n    return 'baz';\n  }\n  set baz(value) {\n    console.log(value);\n  }\n}\n\n// good\nclass Foo {\n  private static foo = 'foo';\n  public static getFoo() {\n    return Foo.foo;\n  }\n  public constructor() {}\n  protected bar = 'bar';\n  public getBar() {}\n  public get baz() {\n    return 'baz';\n  }\n  public set baz(value) {\n    console.log(value);\n  }\n}\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011interface/type \u7c7b\u578b\u4e2d\u4f7f\u7528\u4e00\u81f4\u7684\u6210\u5458\u5206\u9694\u7b26 ",(0,r.kt)("inlineCode",{parentName:"p"},";")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-delimiter-style.md"},"@typescript-eslint/member-delimiter-style")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad: comma style(JSON style)\ninterface Foo {\n  name: string,\n  greet(): void,\n}\n\ntype Bar = {\n  name: string,\n  greet(): void,\n};\n\n// bad: line break style\ninterface Foo {\n  name: string\n  greet(): void\n}\n\ntype Bar = {\n  name: string\n  greet(): void\n};\n\n// good\ninterface Foo {\n  name: string;\n  greet(): void;\n}\n\ntype Bar = {\n  name: string;\n  greet(): void;\n};\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u7c7b\u7684\u6210\u5458\u5e94\u6309\u7167\u56fa\u5b9a\u7684\u5148\u540e\u987a\u5e8f\u6392\u5217 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-ordering.md"},"@typescript-eslint/member-ordering")),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"\u7c7b\u7684\u9759\u6001\u65b9\u6cd5 / \u5c5e\u6027\uff08static\uff09\u4f18\u5148\u4e8e\u5b9e\u4f8b\u7684\u65b9\u6cd5 / \u5c5e\u6027\uff08instance\uff09"),(0,r.kt)("li",{parentName:"ol"},"\u5c5e\u6027\uff08field\uff09\u4f18\u5148\u4e8e\u6784\u9020\u51fd\u6570\uff08constructor\uff09\uff0c\u4f18\u5148\u4e8e\u65b9\u6cd5\uff08method\uff09"),(0,r.kt)("li",{parentName:"ol"},"\u516c\u5f00\u7684\u6210\u5458\uff08public\uff09\u4f18\u5148\u4e8e\u53d7\u4fdd\u62a4\u7684\u6210\u5458\uff08protected\uff09\uff0c\u4f18\u5148\u4e8e\u79c1\u6709\u7684\u6210\u5458\uff08private\uff09")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// good\nclass Foo {\n  public static foo1 = 'foo1';\n  protected static foo2 = 'foo2';\n  private static foo3 = 'foo3';\n  public static getFoo1() {}\n  protected static getFoo2() {}\n  private static getFoo3() {\n    return Foo.foo3;\n  }\n  public bar1 = 'bar1';\n  protected bar2 = 'bar2';\n  private bar3 = 'bar3';\n  public constructor() {\n    console.log(Foo.getFoo3());\n    console.log(this.getBar3());\n  }\n  public getBar1() {}\n  protected getBar2() {}\n  private getBar3() {\n    return this.bar3;\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u4f7f\u7528\u5c5e\u6027\u7684\u65b9\u5f0f\u5b9a\u4e49 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/method-signature-style.md"},"@typescript-eslint/method-signature-style")),(0,r.kt)("p",{parentName:"li"},"\u4f7f\u7528\u5c5e\u6027\u53bb\u5b9a\u4e49\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u4e25\u683c\u7684\u68c0\u67e5\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ninterface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\ninterface T3 {\n  func(arg: number): void;\n  func(arg: string): void;\n  func(arg: boolean): void;\n}\n\n// good\ninterface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n// \u5c5e\u6027\u65b9\u6cd5\u5b9e\u73b0\u91cd\u8f7d\ninterface T3 {\n  func: ((arg: number) => void) &\n    ((arg: string) => void) &\n    ((arg: boolean) => void);\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u7981\u6b62\u4f7f\u7528\u5bb9\u6613\u6df7\u6dc6\u7684\u975e\u7a7a\u65ad\u8a00 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.md"},"@typescript-eslint/no-confusing-non-null-assertion")),(0,r.kt)("p",{parentName:"li"},"\u5728\u76f8\u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"==")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"==="),"\uff09\u524d\u4f7f\u7528\u975e\u7a7a\u65ad\u8a00\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"!"),"\uff09\u5f88\u5bb9\u6613\u548c\u4e0d\u7b49\u8fd0\u7b97\u7b26\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"!=")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"!=="),"\uff09\u6df7\u6dc6\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Foo {\n  bar?: string;\n  num?: number;\n}\n\n// bad\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar! == 'hello';\nconst isEqualsNum = 1 + foo.num! == 2;\n\n// good\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar == 'hello';\nconst isEqualsNum = (1 + foo.num!) == 2;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u907f\u514d\u5b9a\u4e49\u7a7a\u7684\u63a5\u53e3\u7c7b\u578b ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-empty-interface.md"},"@typescript-eslint/no-empty-interface")),(0,r.kt)("p",{parentName:"li"},"\u7a7a\u7684\u63a5\u53e3\u7c7b\u578b\u7b49\u6548\u4e8e\u7a7a\u5bf9\u8c61\uff0c\u82e5\u5b83\u53ea\u7ee7\u627f\u53e6\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u90a3\u4e48\u8be5\u7c7b\u578b\u4e0e\u88ab\u7ee7\u627f\u7684\u7c7b\u578b\u7b49\u6548\u3002\u5728\u4ee3\u7801\u4e2d\u5e94\u51cf\u5c11\u5b9a\u4e49\u65e0\u610f\u4e49\u7684\u63a5\u53e3\u7c7b\u578b\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\n// an empty interface\ninterface Foo {}\n\n// an interface with only one supertype (Bar === Foo)\ninterface Bar extends Foo {}\n\n// an interface with an empty list of supertypes\ninterface Baz {}\n\n// good\n// an interface with any number of members\ninterface Foo {\n  name: string;\n}\n\n// same as above\ninterface Bar {\n  age: number;\n}\n\n// an interface with more than one supertype\n// in this case the interface can be used as a replacement of a union type.\ninterface Baz extends Foo, Bar {}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u521d\u59cb\u5316\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"number/string/boolean")," \u7684\u53d8\u91cf\u6216\u53c2\u6570\u5e94\u907f\u514d\u663e\u5f0f\u7684\u7c7b\u578b\u58f0\u660e ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-inferrable-types.md"},"@typescript-eslint/no-inferrable-types")),(0,r.kt)("p",{parentName:"li"},"\u5bf9\u4e8e\u5bb9\u6613\u7c7b\u578b\u63a8\u5012\u51fa\u7684\u53d8\u91cf\u3001\u53c2\u6570\uff0c\u518d\u6b21\u7684\u663e\u5f0f\u58f0\u660e\u7c7b\u578b\u4f1a\u5e26\u6765\u4ee3\u7801\u5197\u4f59\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst foo: number = 1;\nconst bar: string = '';\nclass Foo {\n  prop: number = 5;\n}\nfunction fn(a: number = 5, b: boolean = true) {}\n\n// good\nconst foo = 1;\nconst bar = '';\nclass Foo {\n  prop = 5;\n}\nfunction fn(a = 5, b = true) {}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u65e0\u610f\u4e49\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," \u7c7b\u578b ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-invalid-void-type.md"},"@typescript-eslint/no-invalid-void-type")),(0,r.kt)("p",{parentName:"li"},"\u7981\u6b62\u5728\u8fd4\u56de\u7c7b\u578b\u6216\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u4e4b\u5916\u4f7f\u7528 void \u7c7b\u578b\uff0c\u800c\u4e14\u5728\u8fd4\u56de\u7c7b\u578b\u4e2d\u4e0d\u5e94\u518d\u4e0e\u5176\u4ed6\u7c7b\u578b\u505a\u8054\u5408\u6216\u4ea4\u53c9\u3002"),(0,r.kt)("p",{parentName:"li"},"void \u7c7b\u578b\u4ee3\u8868\u300c\u65e0\u300d\u6216\u51fd\u6570\u300c\u4e0d\u8fd4\u56de\u4efb\u4f55\u503c\u300d\uff0c\u9690\u5f0f\u672a\u5b9a\u4e49\u7c7b\u578b\u4ee3\u8868\u51fd\u6570\u8fd4\u56de\u300c\u672a\u5b9a\u4e49\u7684\u503c undefined\u300d\uff0c\u6240\u4ee5 void \u7c7b\u578b\u65e0\u6cd5\u4e0e\u9664\u4e86 never \u5916\u7684\u5176\u4ed6\u7c7b\u578b\u505a\u8054\u5408\u3001\u4ea4\u53c9\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ntype PossibleValues = string | number | void;\ntype MorePossibleValues = string | ((number & any) | (string | void));\nfunction logSomething(thing: void) {}\nfunction printArg<T = void>(arg: T) {}\nlogAndReturn<void>(undefined);\ninterface Interface {\n  lambda: () => void;\n  prop: void;\n}\nclass MyClass {\n  private readonly propName: void;\n}\n\n// good\ntype NoOp = () => void;\nfunction noop(): void {}\nlet trulyUndefined = void 0;\nasync function promiseMeSomething(): Promise<void> {}\ntype stillVoid = void | never;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u4f7f\u7528 namespace \u6765\u5b9a\u4e49\u547d\u540d\u7a7a\u95f4 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-namespace.md"},"@typescript-eslint/no-namespace")),(0,r.kt)("p",{parentName:"li"},"\u81ea\u5b9a\u4e49 TypeScript \u6a21\u5757\uff08module\uff09\u548c\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u5df2\u7ecf\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u9996\u9009 ES2015 \u7684\u6a21\u5757\u8bed\u6cd5\u6765\u5bfc\u5165\u5bfc\u51fa\u3002\u6b64\u89c4\u5219\u4ecd\u7136\u5141\u8bb8\u5b9a\u4e49\u5916\u90e8\u7684\u6a21\u5757\u6216\u547d\u540d\u7a7a\u95f4\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nmodule foo {}\nnamespace foo {}\n  \n// good\ndeclare module 'foo' {}\ndeclare module foo {}\ndeclare namespace foo {}\ndeclare global {\n  namespace foo {}\n}\ndeclare module foo {\n  namespace foo {}\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"optional chaining")," \u4e4b\u540e\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"non-null")," \u65ad\u8a00 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.md"},"@typescript-eslint/no-non-null-asserted-optional-chain")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"optional chaining")," \u88ab\u8bbe\u8ba1\u4e3a\u8fd4\u56de ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"\uff0c\u5728\u4e4b\u540e\u4f7f\u7528\u975e\u7a7a\u65ad\u8a00\u662f\u9519\u8bef\u7684\uff0c\u4f1a\u5f15\u5165\u4e25\u91cd\u7684\u7c7b\u578b\u5b89\u5168\u95ee\u9898\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nfoo?.bar!;\nfoo?.bar!.baz;\nfoo?.bar()!;\nfoo?.bar!();\nfoo?.bar!().baz;\n\n// good\nfoo?.bar;\n(foo?.bar).baz;\nfoo?.bar();\nfoo?.bar();\nfoo?.bar().baz;\n\n// \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f TS3.9 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5219\u4ee5\u4e0b\u4ee3\u7801\u4e5f\u662f\u6b63\u786e\u7684\nfoo?.bar!.baz;\nfoo?.bar!();\nfoo?.bar!().baz;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u4f7f\u7528 ES2015 import \u8bed\u6cd5\u5f15\u5165\u6a21\u5757 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-require-imports.md"},"@typescript-eslint/no-require-imports")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst fs = require('fs');\n\n// good\nimport * as fs from 'fs';\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u4e0d\u5efa\u8bae\u5c06 this \u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-this-alias.md"},"@typescript-eslint/no-this-alias")),(0,r.kt)("p",{parentName:"li"},"\u901a\u8fc7\u53d8\u91cf\u8d4b\u503c\u4e3a this \u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u51fd\u6570\u4f5c\u7528\u57df\u4e0d\u662f\u6211\u4eec\u63a8\u8350\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u5e94\u4f7f\u7528\u7bad\u5934\u51fd\u6570\u4fdd\u7559\u51fd\u6570\u4f5c\u7528\u57df\u3002\u6b64\u89c4\u5219\u4e2d\u5141\u8bb8\u5bf9 this \u7684\u89e3\u6784\u8d4b\u503c\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nfunction foo() {\n  const self = this;\n  setTimeout(function () {\n    self.doWork();\n  });\n}\n\n// good\nfunction foo() {\n  setTimeout(() => {\n    this.doWork();\n  });\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u5f53\u53d8\u91cf\u7684\u503c\u4e0e\u7c7b\u578b\u58f0\u660e\u76f8\u7b49\u65f6\uff0c\u4f18\u5148\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"as const")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-as-const.md"},"@typescript-eslint/prefer-as-const")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nlet bar: 2 = 2;\nlet foo = <'bar'>'bar';\nlet foo = { bar: 'baz' as 'baz' };\n\n// good\nlet foo = 'bar';\nlet foo = 'bar' as const;\nlet foo: 'bar' = 'bar' as const;\nlet bar = 'bar' as string;\nlet foo = <string>'bar';\nlet foo = { bar: 'baz' };\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u4f7f\u7528 module \u6765\u5b9a\u4e49\u547d\u540d\u7a7a\u95f4 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.md"},"@typescript-eslint/prefer-namespace-keyword")),(0,r.kt)("p",{parentName:"li"},"module \u5df2\u7ecf\u6210\u4e3a JS \u8bed\u8a00\u7684\u5173\u952e\u5b57\uff0c\u5e94\u907f\u514d TypeScript \u6a21\u5757\u4e0e ES2015 \u6a21\u5757\u6df7\u6dc6\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"declare module")," \u4e0d\u505a\u9650\u5236\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nmodule Foo {}\n\n// good\ndeclare module Foo {}\ndeclare namespace Foo {}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4f7f\u7528\u5355\u5f15\u53f7\u5305\u88f9 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/quotes.md"},"@typescript-eslint/quotes")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nconst foo = \"bar\";\n\n// good\nconst foo = 'bar';\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011 \u52a0\u53f7 ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," \u8fde\u63a5\u7684\u4e24\u4fa7\u540c\u4e3a\u6570\u5b57\u6216\u540c\u4e3a\u5b57\u7b26\u4e32 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-plus-operands.md"},"@typescript-eslint/restrict-plus-operands")),(0,r.kt)("p",{parentName:"li"},"\u6570\u5b57\u4e0e\u5b57\u7b26\u4e32\u7684\u8fde\u63a5\u5f80\u5f80\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u9884\u671f\u5916\u7684\u95ee\u9898\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nvar foo = '5.5' + 5;\nvar foo = 1n + 1;\n\n// good\nvar foo = parseInt('5.5', 10) + 10;\nvar foo = 1n + 1n;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7981\u6b62\u4f7f\u7528\u4e09\u659c\u6760\u8bed\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"///")," \u5bfc\u5165\u6587\u4ef6 ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/triple-slash-reference.md"},"@typescript-eslint/triple-slash-reference")),(0,r.kt)("p",{parentName:"li"},"\u4e09\u659c\u6760\u8bed\u6cd5\u5df2\u7ecf\u88ab\u5e9f\u5f03\uff0c\u58f0\u660e\u6587\u4ef6\uff08d.ts\uff09\u4ee5\u5916\u7981\u6b62\u4f7f\u7528\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\n/// <reference path=\"./my-module\" />\n\n// good\nimport myModule from './my-module';\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011\u7c7b\u578b\u58f0\u660e\u65f6\u5e94\u6b63\u786e\u6dfb\u52a0\u7a7a\u683c\u95f4\u8ddd ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/type-annotation-spacing.md"},"@typescript-eslint/type-annotation-spacing")),(0,r.kt)("p",{parentName:"li"},"TypeScript \u7c7b\u578b\u58f0\u660e\u5468\u56f4\u6dfb\u52a0\u5408\u9002\u7684\u95f4\u8ddd\u53ef\u4ee5\u6709\u6548\u7684\u63d0\u5347\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u6211\u4eec\u7ea6\u5b9a\uff1a"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"\u5192\u53f7\u524d\u65e0\u7a7a\u683c\uff0c\u5192\u53f7\u540e\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c"),(0,r.kt)("li",{parentName:"ol"},"\u7bad\u5934\u524d\u540e\u90fd\u4fdd\u7559\u4e00\u4e2a\u7a7a\u683c")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nlet foo:string = 'bar';\nlet foo :string = 'bar';\nlet foo : string = 'bar';\n\nfunction foo():string {}\nfunction foo() :string {}\nfunction foo() : string {}\n\nclass Foo {\n  name:string;\n}\n\nclass Foo {\n  name :string;\n}\n\nclass Foo {\n  name : string;\n}\n\ntype Foo = ()=> {};\n\n// good\nlet foo: string = 'bar';\n\nfunction foo(): string {}\n\nclass Foo {\n  name: string;\n}\n\ntype Foo = () => {};\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u5f3a\u5236\u3011interface \u548c type \u5b9a\u4e49\u65f6\u5fc5\u987b\u58f0\u660e\u6210\u5458\u7684\u7c7b\u578b ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/typedef.md"},"@typescript-eslint/typedef")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\ntype Members = {\n  member;\n  otherMember;\n};\n\n// good\ntype Members = {\n  member: boolean;\n  otherMember: string;\n};\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u3010\u63a8\u8350\u3011\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u4f18\u5148\u4f7f\u7528\u53c2\u6570\u7684\u8054\u5408\u7c7b\u578b\u800c\u4e0d\u662f\u51fd\u6570\u7684\u7c7b\u578b\u91cd\u8f7d ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/unified-signatures.md"},"@typescript-eslint/unified-signatures")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// bad\nfunction f(x: number): void;\nfunction f(x: string): void;\nf(): void;\nf(...x: number[]): void;\n\n// good\nfunction f(x: number | string): void;\nfunction f(x?: ...number[]): void;\n")))),(0,r.kt)("h2",{id:"\u914d\u5957\u5de5\u5177"},"\u914d\u5957\u5de5\u5177"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/eslint-config-ali"},"eslint-config-ali"),"\uff1a\u672c\u89c4\u7ea6\u914d\u5957\u7684 ",(0,r.kt)("a",{parentName:"li",href:"http://eslint.org/"},"ESLint")," \u89c4\u5219\u5305\uff0c\u53ef\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"eslint-config-ali/typescript")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"li"},"eslint-config-ali/typescript/xx")," \u5f15\u5165\u672c\u6587\u4ecb\u7ecd\u7684\u89c4\u5219")))}m.isMDXComponent=!0}}]);